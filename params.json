{"name":"Caudit","tagline":"Caudit is a simple library to log application performance related events.","body":"CAUDIT\r\n======\r\n\r\nCaudit is a simple library to log application performance, health and statistics in an \r\norganized manner. It has two basic audit types: stopwatches and quantities. Stopwatches\r\nare the ones which you keep track of the time passed for a specific operation. Quantities \r\nare variables that you want to monitor. Let's make it more understanding with examples.\r\n###Simple Stopwatch Example\r\nIn this example, we try to monitor how much time it takes to run doSomeWork() method. \r\n```java\r\n//Mapping audit to integer is for performance(string comparison vs integer comparison)\r\nprivate final static int BASIC_STOPWATCH_ID = Audits.mapAudit(\"example.basicStopwatch\");\r\n  \r\npublic void tryOut(){\r\n  final Stopwatch stopwatch = Audits.getBasicStopwatch(BASIC_STOPWATCH_ID);\r\n  stopwatch.start();\r\n  doSomeWork();\r\n  stopwatch.stop();\r\n}\r\n```\r\nIf we use default configuration we will see an output on the console as follows.\r\n> example.basicStopwatch : ElapsedTime[5679]\r\n\r\n###Pom Dependency\r\n```xml\r\n<dependency>\r\n  <groupId>com.cetsoft</groupId>\r\n  <artifactId>caudit</artifactId>\r\n  <version>0.0.7</version><!--Can be updated for later versions-->\r\n</dependency>\r\n```\r\n###Simple Quantity Example\r\nIn this example, we try to monitor how many items we retrieve from database. \r\n```java\r\nprivate final static int NO_OF_RETRIEVED_ITEMS_ID = Audits.mapAudit(\"example.noOfRetrievedItems\");\r\n  \r\npublic void tryOut(){\r\n  final LongQuantity quantity = Audits.getLongQuantity(NO_OF_RETRIEVED_ITEMS_ID);\r\n  int size = retrieveItems().size();\r\n  quantity.increment(size);\r\n}\r\n```\r\nIf we use default configuration we will see an output on the console as follows.\r\n> example.noOfRetrievedItems : Quantity[2631]\r\n\r\n###Counting Stopwatch Example\r\nIn this example, we try to monitor how much time it takes to do specific number of operations. \r\n```java\r\nprivate final static int COUNTING_STOPWATCH_ID = Audits.mapAudit(\"example.countingStopwatch\");\r\n  \r\npublic void tryOut(){\r\n  final CountingStopwatch stopwatch = Audits.getCountingStopwatch(COUNTING_STOPWATCH_ID);\r\n  stopwatch.start(0);\r\n  int size = doSomeWork();\r\n  stopwatch.stop(size);\r\n}\r\n```\r\nIf we use default configuration we will see an output on the console as follows.\r\n> example.countingStopwatch : Count[23] ElapsedTime[5679]\r\n\r\nAuditProvider is called for each time interval. Thus, we can see updated output on the console.\r\n###Complex Audit Example\r\nIn this example, we try to monitor specific events that have many attributes.\r\n```java\r\nprivate final static int TOTAL_CHANGES_ID = Audits.mapAudit(\"example.totalChanges\");\r\n  \r\npublic void tryOut(){\r\n  final ComplexAudit audit = Audits.getComplexAudit(TOTAL_CHANGES_ID);\r\n  audit.put(\"width\",3);\r\n  audit.put(\"length\",5);\r\n  audit.put(\"number\",11);\r\n}\r\n```\r\nIf we use default configuration we will see an output on the console as follows.\r\n> example.totalChanges : width[3] length[5] number[11]\r\n\r\n###Default Audits\r\nIf you want to know how much memory you consume or how much threads you run, you can use default\r\nfunctions of caudit as follows.\r\n```java\r\npublic void tryOut(){\r\n   Audits.monitorUsedMemoryInMB();\r\n   Audits.monitorNumberOfThreads();\r\n}\r\n```\r\nIf we use default configuration we will see an output on the console as follows.\r\n> USED_MEMORY_IN_MB : Quantity[3]\r\n\r\n>NO_OF_THREADS : Quantity[5]\r\n\r\n##Specific Scenarios\r\n* In default configuration we print those audits to the console every 10 seconds. You can reset\r\nyour stopwatches or quantities for the new interval by shouldReset method.\r\n\r\n```java\r\nstopwatch.shouldReset(true);\r\n```\r\n* Moreover, one may want to monitor what is the value of something for every interval. It can\r\nbe accomplished by giving a provider to the quantity as follows.\r\n\r\n```java\r\ndoubleQuantity.setProvider(new AuditProvider() {\r\n  public void updateAudit(){\r\n    doubleQuantity.set(Math.random());\r\n  }\r\n});\r\n```\r\n* Sometimes, you may want to measure time for one event and remove it after measurement, this can\r\ndone by AuditRemovalListener. We can set shouldReset to false in order to avoid from resetting it.\r\n\r\n```java\r\nprivate final static int EVENT_ID = Audits.mapAudit(\"example.event\");\r\npublic void startEvent(){\r\n  Stopwatch stopwatch = Audits.getBasicStopwatch(EVENT_ID);\r\n  stopwatch.setShouldReset(false);\r\n  stopwatch.setObservable(false);// By setting observable to false will prevent it from being observed.\r\n  stopwatch.setRemovalListener(new AuditRemovalListener() {\r\n    public void onRemoval(AuditEvent auditEvent) {\r\n      System.out.println(auditEvent);\r\n    }\r\n  });\r\n  stopwatch.start();\r\n}\r\npublic void stopEvent(){\r\n  Stopwatch stopwatch = Audits.getBasicStopwatch(EVENT_ID);\r\n  stopwatch.stop();\r\n  Audits.unmapAudit(stopwatch);\r\n}\r\n```\r\n###Configuration\r\nCaudit configuration is simple, you just give period of caudit and observers for audit events.\r\nHere is an example configuration. I would strongly recommend to use caudit-observers package additionally because it provides logging with log4j and mongodb. It's as simple as follows.\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<caudit>\r\n  <period>1000</period>\r\n    <observers>\r\n      <observer class=\"com.cetsoft.caudit.observer.ConsoleObserver\" />\r\n      <observer class=\"com.cetsoft.caudit.observers.Log4JObserver\" />\r\n      <observer class=\"com.cetsoft.caudit.observers.MongoObserver\">\r\n        <connection-string>some-url</connection-string>\r\n        <dbname>mydb</dbname>\r\n        <port>27017</port>\r\n      </observer>\r\n      <!-- MyObserver is just an example -->\r\n      <observer class=\"com.cetsoft.caudit.observer.YourCustomObserver\" />\r\n    </observers>\r\n</caudit>\r\n```\r\nCaudit tries to find caudit.xml in classpath or you can give\r\nits path by -Dcaudit.configuration.filePath=yourpath, otherwise, it loads the default configuration.\r\n###Licence\r\nCaudit uses GNU Licence.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}